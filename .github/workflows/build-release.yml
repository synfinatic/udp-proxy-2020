# NOTE: multiple `make` commands could be replaced with
# `make release` in future if all binaries are built on MacOS machine

name: Release Binaries

on: [pull_request]
#on:
  # Workflow executes when a new release is created
#  release:
#    types: [created]


env:
  GO_VERSION: '${{ vars.GO_VERSION }}'

jobs:
  # most binaries can be built on linux machine which is the most cost-efficient on GitHub actions
  # for building darwin-arm64 binary we need Xcode, therefore, we need to build it on MacOS

  linux-amd64:
    name: Build Linux x86
    runs-on: ubuntu-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v5

        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y make libpcap0.8 libpcap0.8-dev git gcc

        - name: Install Go
          uses: actions/setup-go@v5
          with:
            go-version: '${{ vars.GO_VERSION }}'

        - name: Run Makefile
          run: |
            make .linux-amd64

      # Artifacts docs: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
#      - name: Upload files as artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ubuntu-build-files
#          path: dist/aws-sso*
#          retention-days: 1

  linux-arm:
    name: Build Linux ARM
    runs-on: ubuntu-24.04-arm

    steps:
        - uses: actions/checkout@v5

        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y make libpcap0.8 libpcap0.8-dev git gcc \
                gccgo-11-arm-linux-gnueabihf gccgo-11-arm-linux-gnueabi \
                gcc-11-arm-linux-gnueabi-base gcc-11-arm-linux-gnueabihf-base \
                gcc-11-arm-linux-gnueabi gcc-11-arm-linux-gnueabihf

        - name: Build Libpcap from source
          run: |
            export LIBPCAP_VERSION=1.10.3
            wget -qO - https://www.tcpdump.org/release/libpcap-${LIBPCAP_VERSION}.tar.gz | tar zxf -

            mkdir -p ./buildhf/bin && cd ./buildhf/bin && \
                ln -s /usr/bin/arm-linux-gnueabihf-gccgo-11 gccgo && \
                ln -s /usr/bin/arm-linux-gnueabihf-gcc-ar-11 ar && \
                ln -s /usr/bin/arm-linux-gnueabihf-gcc-ranlib-11 ranlib && \
                ln -s /usr/bin/arm-linux-gnueabihf-gcc-11 gcc

            cd ../..

            mkdir -p ./build/bin && cd ./build/bin && \
                ln -s /usr/bin/arm-linux-gnueabi-gccgo-11 gccgo && \
                ln -s /usr/bin/arm-linux-gnueabi-gcc-ar-11 ar && \
                ln -s /usr/bin/arm-linux-gnueabi-gcc-ranlib-11 ranlib && \
                ln -s /usr/bin/arm-linux-gnueabi-gcc-11 gcc

            cd ../../libpcap-${LIBPCAP_VERSION}
            # --build i686-pc-linux-gnu is needed to avoid "configure: WARNING: using cross tools not prefixed with host triplet"
            # hardware float
            CC=../buildhf/bin/gcc BUILD_CC=gcc AR=../buildhf/bin/ar  RANLIB=../buildhf/bin/ranlib \
                ./configure \
                --host arm-linux-gnueabihf --prefix=/usr/arm-linux-gnueabihf && \
                sudo make install

            # software float
            make clean && \
                CC=../build/bin/gcc BUILD_CC=gcc AR=../build/bin/ar  RANLIB=../build/bin/ranlib \
                ./configure \
                --host arm-linux-gnueabi --prefix=/usr/arm-linux-gnueabi && \
                sudo make install

            RUN make clean && \ 
                ./configure \
                --host aarch64-linux-gnu --prefix=/usr/aarch64-linux-gnu && \
                sudo make install

        - name: Run Makefile
          run: |
            make .linux-arm

  macos:
    name: Build MacOS x86
    runs-on: macos-latest

    steps:
        - uses: actions/checkout@v5

        - name: Install Go
          uses: actions/setup-go@v5
          with:
            go-version: '${{ vars.GO_VERSION }}'

        - name: Install dependencies
          run: |
            brew update
            brew install make libpcap git   

        - name: Build Binary
          run: |
            PATH="/opt/homebrew/opt/libpcap/bin:$PATH" \
            PKG_CONFIG_PATH="/opt/homebrew/opt/libpcap/lib/pkgconfig" \
            CGO_LDFLAGS="-L/opt/homebrew/opt/libpcap/lib" \
            CGO_CFLAGS="-I/opt/homebrew/opt/libpcap/include" \
            make darwin-amd64

#      - name: Upload files as artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: macos-build-files
#          path: dist/aws-sso*
#          retention-days: 1

#  sign-and-upload-files:
#    name: Sign and upload binary files
#    runs-on: ubuntu-latest
#
#    # Wait for binary files to be built
#    needs: [linux-build, macos-build]
#
#    steps:
#      - name: Download ubuntu binaries
#        uses: actions/download-artifact@v5
#        with:
#          name: ubuntu-build-files
#          path: dist/
#
#      - name: Download macos binaries
#        uses: actions/download-artifact@v5
#        with:
#          name: macos-build-files
#          path: dist/
#
#      # Source: https://github.com/crazy-max/ghaction-import-gpg
#      - name: Import GPG key
#        uses: crazy-max/ghaction-import-gpg@v6.3.0
#        with:
#          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#          passphrase: ${{ secrets.GPG_PASSPHRASE }}
#
#      - name: Create signature file
#        run: |
#          shasum -a 256 dist/* | gpg --clear-sign > dist/release.sig.asc
#
#      # Source: https://github.com/svenstaro/upload-release-action
#      - name: Upload all files to release
#        uses: svenstaro/upload-release-action@v2
#        with:
#          file: dist/*
#          overwrite: true
#          file_glob: true
#